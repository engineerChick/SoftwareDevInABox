{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Creates a Software Development Business in a Box",
  "Parameters": {
    "KeyPair": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Key pair to log into EC2 instances"
    }
  },
  "Resources": {
    "VPC": {
      "Properties": {
        "CidrBlock": "172.17.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      },
      "Type": "AWS::EC2::VPC"
    },
    "SubnetPublic1": {
      "Properties": {
        "AvailabilityZone": "us-east-1a",
        "CidrBlock": "172.17.0.0/24",
        "MapPublicIpOnLaunch": true,
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-SubnetPublic1"
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::EC2::Subnet"
    },
    "SubnetPublic2": {
      "Properties": {
        "AvailabilityZone": "us-east-1b",
        "CidrBlock": "172.17.2.0/24",
        "MapPublicIpOnLaunch": true,
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-SubnetPublic2"
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::EC2::Subnet"
    },
    "SubnetPrivate": {
      "Properties": {
        "CidrBlock": "172.17.100.0/24",
        "MapPublicIpOnLaunch": false,
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-SubnetPrivate"
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::EC2::Subnet"
    },
    "InternetGateway": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      },
      "Type": "AWS::EC2::InternetGateway"
    },
    "VPCGatewayAttachment": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    },
    "SubnetPublic1RouteTable": {
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-SubnetPublic1RouteTable"
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "SubnetPublic2RouteTable": {
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-SubnetPublic2RouteTable"
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "SubnetPublic1Route": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "SubnetPublic1RouteTable"
        }
      },
      "DependsOn": "VPCGatewayAttachment",
      "Type": "AWS::EC2::Route"
    },
    "SubnetPublic2Route": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "SubnetPublic2RouteTable"
        }
      },
      "DependsOn": "VPCGatewayAttachment",
      "Type": "AWS::EC2::Route"
    },
    "SubnetPublic1RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "SubnetPublic1RouteTable"
        },
        "SubnetId": {
          "Ref": "SubnetPublic1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "SubnetPublic2RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "SubnetPublic2RouteTable"
        },
        "SubnetId": {
          "Ref": "SubnetPublic2"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "SubnetPrivateRouteTable": {
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-SubnetPrivateRouteTable"
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "SubnetPrivateRoute": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "SubnetPrivateRouteTable"
        }
      },
      "DependsOn": "VPCGatewayAttachment",
      "Type": "AWS::EC2::Route"
    },
    "SubnetPrivateRouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "SubnetPrivateRouteTable"
        },
        "SubnetId": {
          "Ref": "SubnetPrivate"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "ECSLaunchConfig": {
      "Properties" : {
        "AssociatePublicIpAddress" : true,
        "EbsOptimized" : false,
        "IamInstanceProfile" : {
          "Ref": "ECSInstanceProfile"
        },
        "ImageId" : "ami-00129b193dc81bc31",
        "InstanceMonitoring" : true,
        "InstanceType" : "t2.medium",
        "KeyName" : {
          "Ref": "KeyPair"
        },
        "LaunchConfigurationName": "Production",
        "SecurityGroups": [
          {
            "Ref": "productionSecurityGroupPublic"
          },
          {
            "Ref": "productionSecurityGroupPrivate"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "set -ex\n",
                "yum update -y\n",
                "yum install -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "  --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "  --resource ECSLaunchConfig",
                "  --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "echo ECS_CLUSTER=",
                {
                  "Ref": "ECSProdCluster"
                },
                " >> /etc/ecs/ecs.config\n",
                "service docker restart\n",
                "start ecs\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "  --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "  --resource ECSAutoScalingGroup",
                "  --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "nfs-utils": []
              }
            }
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "productionASG":{  
       "Properties": {
          "AutoScalingGroupName": "Production",
          "DesiredCapacity": 2,
          "LaunchConfigurationName" : {
            "Ref": "ECSLaunchConfig"
          },
          "MaxSize": 2,
          "MinSize": 2,
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Ref": "AWS::StackName"
              },
              "PropagateAtLaunch": true
            }  
          ],
          "VPCZoneIdentifier": [ 
            {
              "Ref": "SubnetPublic1"
            },
            {
              "Ref": "SubnetPublic2"
            },
            {
              "Ref": "SubnetPrivate"
            }
          ]
       },
       "Type": "AWS::AutoScaling::AutoScalingGroup"
    },
    "productionSecurityGroupPublic":{
      "Properties" : {
        "GroupName" : "ProductionPublic",
        "GroupDescription" : "Public Security Group for Production Instances & Services",
        "SecurityGroupIngress" : [
          {
            "CidrIp" : "0.0.0.0/0",
            "Description" : "Jira Web Interface",
            "FromPort" : 8081,
            "ToPort" : 8081,
            "IpProtocol" : "tcp"
          },
          {
            "CidrIp" : "0.0.0.0/0",
            "Description" : "Confluence Web Interface",
            "FromPort" : 8090,
            "ToPort" : 8090,
            "IpProtocol" : "tcp"
          },
          {
            "CidrIp" : "0.0.0.0/0",
            "Description" : "Confluence Collaborative Editing",
            "FromPort" : 8091,
            "ToPort" : 8091,
            "IpProtocol" : "tcp"
          },{
            "CidrIp" : "0.0.0.0/0",
            "Description" : "Gitlab Web Interface",
            "FromPort" : 8082,
            "ToPort" : 8082,
            "IpProtocol" : "tcp"
          },
          {
            "CidrIp" : "0.0.0.0/0",
            "Description" : "Gitlab SSH",
            "FromPort" : 2222,
            "ToPort" : 2222,
            "IpProtocol" : "tcp"
          },
          {
            "CidrIp" : "0.0.0.0/0",
            "Description" : "Jenkins Web Interface",
            "FromPort" : 8080,
            "ToPort" : 8080,
            "IpProtocol" : "tcp"
          },
          {
            "CidrIp" : "0.0.0.0/0",
            "Description" : "HTTPS Access",
            "FromPort" : 443,
            "ToPort" : 443,
            "IpProtocol" : "tcp"
          }
        ],
        "Tags" :  [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          } 
        ],
        "VpcId" : {
          "Ref": "VPC"
        }
     },
     "Type" : "AWS::EC2::SecurityGroup"
    },
    "productionSecurityGroupPrivate":{
      "Properties" : {
        "GroupName" : "ProductionPrivate",
        "GroupDescription" : "Private Security Group for Production Instances & Services",
        "SecurityGroupIngress" : [
          {
            "CidrIp" : "0.0.0.0/0",
            "Description" : "Jenkins Slave",
            "FromPort" : 50000,
            "ToPort" : 50000,
            "IpProtocol" : "tcp"
          },
          {
            "CidrIp" : "0.0.0.0/0",
            "Description" : "Postgres",
            "FromPort" : 5432,
            "ToPort" : 5432,
            "IpProtocol" : "tcp"
          }
        ],
        "Tags" :  [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          } 
        ],
        "VpcId" : {
          "Ref": "VPC"
        }
     },
     "Type" : "AWS::EC2::SecurityGroup"
    },
    "ECSProdCluster":{
      "Type" : "AWS::ECS::Cluster"
    }, 
    "ECSJenkinsCluster":{
      "Type" : "AWS::ECS::Cluster"
    },
    "ECSInstanceProfile":{
      "Properties": {
        "Roles": [
          {
            "Ref":"ECSInstanceRole"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "ECSInstanceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "AmazonEC2ContainerServiceforEC2Role",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "ecs:ListTaskDefinitions",
                    "ecs:RunTask",
                    "ecs:DescribeTaskDefinition",
                    "ecr:GetAuthorizationToken",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "AmazonEC2ContainerServiceJenkinsPluginRole",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:DescribeContainerInstances",
                    "ecs:ListClusters",
                    "ecs:RegisterTaskDefinition"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:RunTask"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:ecs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":task-definition/jenkins-slave:*"
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:ListContainerInstances",
                    "ecs:StopTask"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:ecs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":cluster/",
                        {
                          "Ref": "ECSProdCluster"
                        }
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:StopTask"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:ecs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":task/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "ECSServiceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "AmazonEC2ContainerServiceRole",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "elasticloadbalancing:DeregisterTargets",
                    "elasticloadbalancing:RegisterTargets"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "ProdLoadBalancer":{      
      "Properties" : {
        "SecurityGroups" : [
          {
            "Ref":"productionSecurityGroupPublic"
          }
        ],
        "Subnets" : [
          {
            "Ref":"SubnetPublic1"
          },
          {
            "Ref":"SubnetPublic2"
          }
        ],
        "Tags" : [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          } 
        ],
        "Type" : "application"
      },
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer"
    },
    "ProdELBListener":{
      "Properties" : {
        "Certificates" : [
          {
            "CertificateArn" : {
              "Ref":"ProductionCertificate"
            }
          }
        ],
        "DefaultActions" : [
          {
            "TargetGroupArn" : {
              "Ref":"ConfluenceTargetGroup"
            },
            "Type" : "forward"
          }
        ],
        "LoadBalancerArn" : {
          "Ref":"ProdLoadBalancer"
        },
        "Port" : 443,
        "Protocol" : "HTTPS"
      },
      "DependsOn": "ProdLoadBalancer",
      "Type" : "AWS::ElasticLoadBalancingV2::Listener"
    },
    "ProductionCertificate":{
      "Properties" : {
        "DomainName" : "*.edwardsc.com",
        "Tags" : [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          } 
        ],
        "ValidationMethod" : "DNS"
      },
      "Type" : "AWS::CertificateManager::Certificate"
    },
    "ProdJiraELBListenerRule":{
      "Properties" : {
        "Actions" : [
          {
            "TargetGroupArn" : {
              "Ref":"JiraTargetGroup"
            },
            "Type" : "forward"
          }
        ],
        "Conditions" : [
          {
            "Field" : "host-header",
            "Values" : ["jira.edwardsc.com"]
          }
        ],
        "ListenerArn" : {
          "Ref":"ProdELBListener"
        },
        "Priority" : 10
      },
      "Type" : "AWS::ElasticLoadBalancingV2::ListenerRule"
    },
    "JiraTargetGroup":{
      "Properties" : {
        "HealthCheckIntervalSeconds" : 60,
        "HealthCheckPath" : "/status",
        "HealthCheckProtocol" : "HTTP",
        "HealthCheckTimeoutSeconds" : 10,
        "HealthyThresholdCount" : 5,
        "Matcher" :{
          "HttpCode": 200
        },
        "Name" : "Jira-Target-Group",
        "Port" : 8081,
        "Protocol" : "HTTP",
        "Tags" : [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          } 
        ],
        "UnhealthyThresholdCount" : 2,
        "VpcId" : {
          "Ref":"VPC"
        }
      },
      "DependsOn": "ProdLoadBalancer",
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup"
    },
    "ProdConfluenceELBListenerRule":{
      "Properties" : {
        "Actions" : [
          {
            "TargetGroupArn" : {
              "Ref":"ConfluenceTargetGroup"
            },
            "Type" : "forward"
          }
        ],
        "Conditions" : [
          {
            "Field" : "host-header",
            "Values" : ["confluence.edwardsc.com"]
          }
        ],
        "ListenerArn" : {
          "Ref":"ProdELBListener"
        },
        "Priority" : 20
      },
      "Type" : "AWS::ElasticLoadBalancingV2::ListenerRule"
    },
    "ConfluenceTargetGroup":{
      "Properties" : {
        "HealthCheckIntervalSeconds" : 60,
        "HealthCheckPath" : "/status",
        "HealthCheckProtocol" : "HTTP",
        "HealthCheckTimeoutSeconds" : 10,
        "HealthyThresholdCount" : 5,
        "Matcher" :{
          "HttpCode": 200
        },
        "Name" : "Confluence-Target-Group",
        "Port" : 8090,
        "Protocol" : "HTTP",
        "Tags" : [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          } 
        ],
        "UnhealthyThresholdCount" : 2,
        "VpcId" : {
          "Ref":"VPC"
        }
      },
      "DependsOn": "ProdLoadBalancer",
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup"
    },
    "ProdGitLabELBListenerRule":{
      "Properties" : {
        "Actions" : [
          {
            "TargetGroupArn" : {
              "Ref":"GitLabTargetGroup"
            },
            "Type" : "forward"
          }
        ],
        "Conditions" : [
          {
            "Field" : "host-header",
            "Values" : ["GitLab.edwardsc.com"]
          }
        ],
        "ListenerArn" : {
          "Ref":"ProdELBListener"
        },
        "Priority" : 30
      },
      "Type" : "AWS::ElasticLoadBalancingV2::ListenerRule"
    },
    "GitLabTargetGroup":{
      "Properties" : {
        "HealthCheckIntervalSeconds" : 60,
        "HealthCheckPath" : "/status",
        "HealthCheckProtocol" : "HTTP",
        "HealthCheckTimeoutSeconds" : 10,
        "HealthyThresholdCount" : 5,
        "Matcher" :{
          "HttpCode": 200
        },
        "Name" : "GitLab-Target-Group",
        "Port" : 8082,
        "Protocol" : "HTTP",
        "Tags" : [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          } 
        ],
        "UnhealthyThresholdCount" : 2,
        "VpcId" : {
          "Ref":"VPC"
        }
      },
      "DependsOn": "ProdLoadBalancer",
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup"
    },
    "ProdJenkinsELBListenerRule":{
      "Properties" : {
        "Actions" : [
          {
            "TargetGroupArn" : {
              "Ref":"JenkinsTargetGroup"
            },
            "Type" : "forward"
          }
        ],
        "Conditions" : [
          {
            "Field" : "host-header",
            "Values" : ["jenkins.edwardsc.com"]
          }
        ],
        "ListenerArn" : {
          "Ref":"ProdELBListener"
        },
        "Priority" : 40
      },
      "Type" : "AWS::ElasticLoadBalancingV2::ListenerRule"
    },
    "JenkinsTargetGroup":{
      "Properties" : {
        "HealthCheckIntervalSeconds" : 60,
        "HealthCheckPath" : "/status",
        "HealthCheckProtocol" : "HTTP",
        "HealthCheckTimeoutSeconds" : 10,
        "HealthyThresholdCount" : 5,
        "Matcher" :{
          "HttpCode": 200
        },
        "Name" : "Jenkins-Target-Group",
        "Port" : 8080,
        "Protocol" : "HTTP",
        "Tags" : [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          } 
        ],
        "UnhealthyThresholdCount" : 2,
        "VpcId" : {
          "Ref":"VPC"
        }
      },
      "DependsOn": "ProdLoadBalancer",
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup"
    },
    "ConfluenceECSService": {
      "Properties" : {
        "Cluster" : {
          "Ref": "ECSProdCluster"
        },
        "DesiredCount" : 1,
        "HealthCheckGracePeriodSeconds" : 120,
        "LaunchType" : "EC2",
        "LoadBalancers": [
          {
            "TargetGroupArn": {
              "Ref" : "ConfluenceTargetGroup"
            },
            "ContainerPort": "8090",
            "ContainerName": "Confluence"
          }
        ],
        "Role" : {
          "Ref" : "ECSServiceRole"
        },
        "ServiceName" : "Confluence",
        "TaskDefinition" : {
          "Ref" : "ConfluenceECSTaskDef"
        }
      },
      "DependsOn": ["ConfluenceTargetGroup","productionASG","ProdELBListener"],
      "Type" : "AWS::ECS::Service"
    },
    "ConfluenceECSTaskDef": {
      "Properties" : {
        "Volumes" : [
          {
            "Host" : {
              "SourcePath" : "/opt/atlassian/confluence/home"
            },
            "Name" : "ConfluenceHome"
          },
          {
            "Host" : {
              "SourcePath" : "/opt/atlassian/confluence/logs"
            },
            "Name" : "ConfluenceLog"
          }
        ],
        "Cpu" : 1024,
        "Memory" : 2048,
        "ContainerDefinitions" : [
          {
            "Environment" : [
              {
                "Name" : "X_PROXY_NAME",
                "Value" : "confluence.edwardsc.com" 
              },
              {
                "Name" : "X_PROXY_PORT",
                "Value" : "443" 
              },
              {
                "Name" : "X_PROXY_SCHEME",
                "Value" : "https" 
              },
              {
                "Name" : "X_PROXY_SECURE",
                "Value" : "true" 
              }
            ],
            "Essential" : true,
            "Hostname" : "confluence",
            "Image" : "cptactionhank/atlassian-confluence:latest",
            "Memory" : 2048,
            "MemoryReservation" : 2048,
            "MountPoints" : [ 
              {
              "ContainerPath" : "/var/atlassian/confluence",
              "SourceVolume" : "ConfluenceHome"
              },
              {
              "ContainerPath" : "/opt/atlassian/confluence/logs",
              "SourceVolume" : "ConfluenceLog"
              }
            ],
            "Name" : "Confluence",
            "PortMappings" : [ 
              {
                "ContainerPort" : 8090,
                "HostPort" : 8090,
                "Protocol" : "tcp"
              },
              {
                "ContainerPort" : 8091,
                "HostPort" : 8091,
                "Protocol" : "tcp"
              }
            ],
            "Privileged" : false
          }
        ]
      },
      "Type" : "AWS::ECS::TaskDefinition"
    },
    "JiraECSService": {
      "Properties" : {
        "Cluster" : {
          "Ref": "ECSProdCluster"
        },
        "DesiredCount" : 1,
        "HealthCheckGracePeriodSeconds" : 120,
        "LaunchType" : "EC2",
        "LoadBalancers": [
          {
            "TargetGroupArn": {
              "Ref" : "JiraTargetGroup"
            },
            "ContainerPort": "8080",
            "ContainerName": "Jira"
          }
        ],
        "Role" : {
          "Ref" : "ECSServiceRole"
        },
        "ServiceName" : "Jira",
        "TaskDefinition" : {
          "Ref" : "JiraECSTaskDef"
        }
      },
      "DependsOn": ["JiraTargetGroup","productionASG"],
      "Type" : "AWS::ECS::Service"
    },
    "JiraECSTaskDef": {
      "Properties" : {
        "Volumes" : [
          {
            "Host" : {
              "SourcePath" : "/opt/atlassian/jira/home"
            },
            "Name" : "JiraHome"
          },
          {
            "Host" : {
              "SourcePath" : "/opt/atlassian/jira/logs"
            },
            "Name" : "JiraLog"
          }
        ],
        "Cpu" : 1024,
        "Memory" : 2048,
        "ContainerDefinitions" : [
          {
            "Environment" : [
              {
                "Name" : "X_PROXY_NAME",
                "Value" : "jira.edwardsc.com" 
              },
              {
                "Name" : "X_PROXY_PORT",
                "Value" : "443" 
              },
              {
                "Name" : "X_PROXY_SCHEME",
                "Value" : "https" 
              },
              {
                "Name" : "X_PROXY_SECURE",
                "Value" : "true" 
              }
            ],
            "Essential" : true,
            "Hostname" : "jira",
            "Image" : "cptactionhank/atlassian-jira:latest",
            "Memory" : 2048,
            "MemoryReservation" : 2048,
            "MountPoints" : [ 
              {
              "ContainerPath" : "/var/atlassian/jira",
              "SourceVolume" : "JiraHome"
              },
              {
              "ContainerPath" : "/opt/atlassian/jira/logs",
              "SourceVolume" : "JiraLog"
              }
            ],
            "Name" : "Jira",
            "PortMappings" : [ 
              {
                "ContainerPort" : 8080,
                "HostPort" : 8081,
                "Protocol" : "tcp"
              }
            ],
            "Privileged" : false
          }
        ]
      },
      "Type" : "AWS::ECS::TaskDefinition"
    },
    "GitlabECSService": {
      "Properties" : {
        "Cluster" : {
          "Ref": "ECSProdCluster"
        },
        "DesiredCount" : 1,
        "HealthCheckGracePeriodSeconds" : 120,
        "LaunchType" : "EC2",
        "LoadBalancers": [
          {
            "TargetGroupArn": {
              "Ref" : "GitLabTargetGroup"
            },
            "ContainerPort": "80",
            "ContainerName": "Gitlab"
          }
        ],
        "Role" : {
          "Ref" : "ECSServiceRole"
        },
        "ServiceName" : "Gitlab",
        "TaskDefinition" : {
          "Ref" : "GitlabECSTaskDef"
        }
      },
      "DependsOn": ["GitLabTargetGroup","productionASG"],
      "Type" : "AWS::ECS::Service"
    },
    "GitlabECSTaskDef": {
      "Properties" : {
        "Volumes" : [
          {
            "Host" : {
              "SourcePath" : "/opt/gitlab/config"
            },
            "Name" : "GitlabConfig"
          },
          {
            "Host" : {
              "SourcePath" : "/opt/gitlab/logs"
            },
            "Name" : "GitlabLog"
          },
          {
            "Host":{
              "SourcePath" : "/opt/gitlab/data"
            },
            "Name" : "GitlabData"
          }
        ],
        "Cpu" : 1024,
        "Memory" : 2048,
        "ContainerDefinitions" : [
          {
            "Environment" : [
              {
                "Name" : "GITLAB_OMNIBUS_CONFIG",
                "Value" : "external_url 'http://gitlab.edwardsc.com/'; gitlab_rails['lfs_enabled'] = true;" 
              }
            ],
            "Essential" : true,
            "Hostname" : "gitlab",
            "Image" : "gitlab/gitlab-ce:latest",
            "Memory" : 2048,
            "MemoryReservation" : 2048,
            "MountPoints" : [ 
              {
              "ContainerPath" : "/etc/gitlab",
              "SourceVolume" : "GitlabConfig"
              },
              {
              "ContainerPath" : "/var/log/gitlab",
              "SourceVolume" : "GitlabLog"
              },
              {
                "ContainerPath" : "/var/opt/gitlab",
                "SourceVolume" : "GitlabData"
              }
            ],
            "Name" : "Gitlab",
            "PortMappings" : [ 
              {
                "ContainerPort" : 80,
                "HostPort" : 8082,
                "Protocol" : "tcp"
              },
              {
                "ContainerPort" : 22,
                "HostPort" : 2222,
                "Protocol" : "tcp"
              }
            ],
            "Privileged" : false
          }
        ]
      },
      "Type" : "AWS::ECS::TaskDefinition"
    },
    "JenkinsECSService": {
      "Properties" : {
        "Cluster" : {
          "Ref": "ECSProdCluster"
        },
        "DesiredCount" : 1,
        "HealthCheckGracePeriodSeconds" : 120,
        "LaunchType" : "EC2",
        "LoadBalancers": [
          {
            "TargetGroupArn": {
              "Ref" : "JenkinsTargetGroup"
            },
            "ContainerPort": "8080",
            "ContainerName": "Jenkins"
          }
        ],
        "Role" : {
          "Ref" : "ECSServiceRole"
        },
        "ServiceName" : "Jenkins",
        "TaskDefinition" : {
          "Ref" : "JenkinsECSTaskDef"
        }
      },
      "DependsOn": ["JenkinsTargetGroup","productionASG"],
      "Type" : "AWS::ECS::Service"
    },
    "JenkinsECSTaskDef": {
      "Properties" : {
        "Volumes" : [
          {
            "Host" : {
              "SourcePath" : "/opt/jenkins/home"
            },
            "Name" : "JenkinsHome"
          }
        ],
        "Cpu" : 1024,
        "Memory" : 2048,
        "ContainerDefinitions" : [
          {
            "Environment" : [],
            "Essential" : true,
            "Hostname" : "jenkins",
            "Image" : "jenkins/jenkins:lts",
            "Memory" : 2048,
            "MemoryReservation" : 2048,
            "MountPoints" : [ 
              {
              "ContainerPath" : "/var/jenkins_home",
              "SourceVolume" : "JenkinsHome"
              }
            ],
            "Name" : "Jenkins",
            "PortMappings" : [ 
              {
                "ContainerPort" : 8080,
                "HostPort" : 8080,
                "Protocol" : "tcp"
              }
            ],
            "Privileged" : false
          }
        ]
      },
      "Type" : "AWS::ECS::TaskDefinition"
    },
    "ConfluenceRecordSet" : {
      "Properties" : {
        "AliasTarget" : {
          "DNSName" : { "Fn::GetAtt" : ["ProdLoadBalancer", "DNSName"] },
          "HostedZoneId" : "Z35SXDOTRQ7X7K"
        },
        "HostedZoneName" : "edwardsc.com.",
        "Name" : "confluence.edwardsc.com.",
        "Type" : "A"
      },
      "Type" : "AWS::Route53::RecordSet"
    }
  }
}
